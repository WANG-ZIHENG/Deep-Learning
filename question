


import torch
import torch.nn as nn
from .utils import load_state_dict_from_url
from .RSG import *

__all__ = ['resnet50', 'resnet152', 'resnext50_32x4d']


model_urls = {
    'resnet50': 'https://download.pytorch.org/models/resnet50-19c8e357.pth',
    'resnet152': 'https://download.pytorch.org/models/resnet152-b121ed2d.pth',
    'resnext50_32x4d': 'https://download.pytorch.org/models/resnext50_32x4d-7cdf4587.pth',
}


def conv3x3(in_planes, out_planes, stride=1, groups=1, dilation=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=dilation, groups=groups, bias=False, dilation=dilation)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


class NormedLinear(nn.Module):

    def __init__(self, in_features, out_features):
        super(NormedLinear, self).__init__()
        self.weight = Parameter(torch.Tensor(in_features, out_features))
        self.weight.data.uniform_(-1, 1).renorm_(2, 1, 1e-5).mul_(1e5)

    def forward(self, x):
        out = (F.normalize(x, dim=1)).mm(F.normalize(self.weight, dim=0))
        return out


class BasicBlock(nn.Module):
    expansion = 1
    __constants__ = ['downsample']

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,
                 base_width=64, dilation=1, norm_layer=None):
        super(BasicBlock, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        if groups != 1 or base_width != 64:
            raise ValueError('BasicBlock only supports groups=1 and base_width=64')
        if dilation > 1:
            raise NotImplementedError("Dilation > 1 not supported in BasicBlock")
        # Both self.conv1 and self.downsample layers downsample the input when stride != 1
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = norm_layer(planes)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = norm_layer(planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        return out


class Bottleneck(nn.Module):
    expansion = 4
    __constants__ = ['downsample']

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,
                 base_width=64, dilation=1, norm_layer=None):
        super(Bottleneck, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        width = int(planes * (base_width / 64.)) * groups
        # Both self.conv2 and self.downsample layers downsample the input when stride != 1
        self.conv1 = conv1x1(inplanes, width)
        self.bn1 = norm_layer(width)
        self.conv2 = conv3x3(width, width, stride, groups, dilation)
        self.bn2 = norm_layer(width)
        self.conv3 = conv1x1(width, planes * self.expansion)
        self.bn3 = norm_layer(planes * self.expansion)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        return out


class ResNet(nn.Module):

    def __init__(self, block, layers, num_classes=1000, head_lists=[], zero_init_residual=False,
                 groups=1, width_per_group=64, phase_train=True, epoch_thresh=0, replace_stride_with_dilation=None,
                 norm_layer=None):
        super(ResNet, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        self._norm_layer = norm_layer

        self.inplanes = 64
        self.dilation = 1
        self.phase_train = phase_train
        
        if replace_stride_with_dilation is None:
            # each element in the tuple indicates if we should replace
            # the 2x2 stride with a dilated convolution instead
            replace_stride_with_dilation = [False, False, False]
        if len(replace_stride_with_dilation) != 3:
            raise ValueError("replace_stride_with_dilation should be None "
                             "or a 3-element tuple, got {}".format(replace_stride_with_dilation))
        self.groups = groups
        self.base_width = width_per_group
        self.conv1 = nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3,
                               bias=False)
        self.bn1 = norm_layer(self.inplanes)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2,
                                       dilate=replace_stride_with_dilation[0])
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2,
                                       dilate=replace_stride_with_dilation[1])
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2,
                                       dilate=replace_stride_with_dilation[2])
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))

        if self.phase_train:
           self.head_lists = head_lists
           self.RSG = RSG(n_center = 15, feature_maps_shape = [256*block.expansion, 14, 14], num_classes=num_classes, contrastive_module_dim = 256, head_class_lists = self.head_lists, epoch_thresh = epoch_thresh)

        self.fc_ = NormedLinear(512 *block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                nn.init.kaiming_normal_(m.weight)

        # Zero-initialize the last BN in each residual branch,
        # so that the residual branch starts with zeros, and each residual block behaves like an identity.
        # This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677
        if zero_init_residual:
            for m in self.modules():
                if isinstance(m, Bottleneck):
                    nn.init.constant_(m.bn3.weight, 0)
                elif isinstance(m, BasicBlock):
                    nn.init.constant_(m.bn2.weight, 0)

    def _make_layer(self, block, planes, blocks, stride=1, dilate=False):
        norm_layer = self._norm_layer
        downsample = None
        previous_dilation = self.dilation
        if dilate:
            self.dilation *= stride
            stride = 1
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                conv1x1(self.inplanes, planes * block.expansion, stride),
                norm_layer(planes * block.expansion),
            )

        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample, self.groups,
                            self.base_width, previous_dilation, norm_layer))
        self.inplanes = planes * block.expansion
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes, groups=self.groups,
                                base_width=self.base_width, dilation=self.dilation,
                                norm_layer=norm_layer))

        return nn.Sequential(*layers)

    def _forward_impl(self, x, epoch=0, batch_target=None,  phase_train=True):

        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)

        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        
        if phase_train:
          x, cesc_total, loss_mv_total, combine_target = self.RSG.forward(x, self.head_lists, batch_target, epoch)
        
        x = self.layer4(x)
        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.fc_(x)

        if phase_train:
          return x, cesc_total, loss_mv_total, combine_target
        else:
          return x


    def forward(self, x, epoch=0, batch_target=None, phase_train=True):
        return self._forward_impl(x, epoch, batch_target, phase_train)


def _resnet(arch, block, layers, pretrained, progress, num_classes=1000, head_lists=[], phase_train=True, epoch_thresh=0):

    model = ResNet(block, layers, num_classes = num_classes, head_lists=head_lists, phase_train=phase_train, epoch_thresh=epoch_thresh)

    if pretrained:
        state_dict = load_state_dict_from_url(model_urls[arch],
                                              progress=progress)
        model_dict = model.state_dict()
        state_dict = {k: v for k, v in state_dict.items() if k in model_dict}
        model_dict.update(state_dict) 
        model.load_state_dict(model_dict)

    return model


def _resnext(arch, block, layers, pretrained, progress, num_classes=1000, head_lists=[], phase_train=True, epoch_thresh=0):

    model = ResNet(block, layers, groups=32, width_per_group=4, num_classes = num_classes, head_lists=head_lists, phase_train=phase_train, epoch_thresh=epoch_thresh)

    if pretrained:
        state_dict = load_state_dict_from_url(model_urls[arch],
                                              progress=progress)
        model_dict = model.state_dict()
        state_dict = {k: v for k, v in state_dict.items() if k in model_dict}
        model_dict.update(state_dict) 
        model.load_state_dict(model_dict)

    return model


def resnet50(pretrained=False, progress=True, num_classes=1000, head_lists=[], phase_train=True, epoch_thresh=0):
    r"""ResNet-50 model from
    `"Deep Residual Learning for Image Recognition" <https://arxiv.org/pdf/1512.03385.pdf>`_
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    return _resnet('resnet50', Bottleneck, [3, 4, 6, 3], pretrained, progress, num_classes, head_lists, phase_train, epoch_thresh)


def resnet152(pretrained=True, progress=True, num_classes=1000, head_lists=[], phase_train=True, epoch_thresh=0):
    r"""ResNet-152 model from
    `"Deep Residual Learning for Image Recognition" <https://arxiv.org/pdf/1512.03385.pdf>`_
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    return _resnet('resnet152', Bottleneck, [3, 8, 36, 3], pretrained, progress, num_classes, head_lists, phase_train, epoch_thresh)


def resnext50_32x4d(pretrained=False, progress=True, num_classes=1000, head_lists=[], phase_train=True, epoch_thresh=0):
    r"""ResNeXt-50 32x4d model from
    `"Aggregated Residual Transformation for Deep Neural Networks" <https://arxiv.org/pdf/1611.05431.pdf>`_
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    return _resnext('resnext50_32x4d', Bottleneck, [3, 4, 6, 3],
                   pretrained, progress, num_classes, head_lists, phase_train, epoch_thresh)







import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.nn.init as init
import numpy as np
from torch.nn import Parameter
from torch.autograd import Variable


class RSG(nn.Module):
    def __init__(self, n_center = 3, feature_maps_shape = [32, 16, 16], num_classes=10, contrastive_module_dim = 128, head_class_lists = [], transfer_strength = 1.0, epoch_thresh = 100):
        super(RSG, self).__init__()
        
        self.num_classes = num_classes
        self.C, self.H, self.W = feature_maps_shape

        self.n_center = n_center
        self.pooling = nn.AvgPool2d(self.H)
 
        self.linear = nn.Parameter(torch.randn(num_classes, self.C, n_center).cuda())
        self.bias = nn.Parameter(torch.ones(num_classes, n_center).cuda()) 

        self.centers = nn.Parameter(torch.zeros(num_classes, n_center, self.C).cuda())
        self.softmax = nn.Softmax(dim=1)
        self.strength =  transfer_strength
        self.epoch_thresh = epoch_thresh

        self.contrastive_module_dim = contrastive_module_dim

        self.vec_transformation_module = nn.Sequential(
                  nn.Conv2d(self.C, self.C,  kernel_size=3, stride=1, padding=1),
                )
          
        self.contrastive_module = nn.Sequential(
                  nn.Conv2d(self.C * 2, contrastive_module_dim,  kernel_size=1, stride=1, padding=0),
                  nn.ReLU(inplace=True),
                  nn.Conv2d(contrastive_module_dim, contrastive_module_dim,  kernel_size=3, stride=1, padding=1),
                  nn.AvgPool2d(self.H)
                )

        self.contrastive_fc = nn.Linear(self.contrastive_module_dim, 2)

        for m in self.modules():
         if isinstance(m, nn.Conv2d):
          init.kaiming_normal_(m.weight)
          if m.bias is not None:
           init.zeros_(m.bias)
         elif isinstance(m, nn.Linear):
          init.normal_(m.weight)
          if m.bias is not None: 
           init.zeros_(m.bias)

    def compute_cesc_loss(self, feature_maps, c, gamma, target, epoch):
        num, C, H, W = feature_maps.size()
        gamma = gamma.unsqueeze(1)
   
        if epoch <= self.epoch_thresh:
         feature1 = feature_maps[0:num//2, :, :, :]
         feature2 = feature_maps[num//2:num, :, :, :]

         target1 = target[0 : num//2]
         target2 = target[num//2 : num]

         feature_cat = torch.cat([feature1, feature2], dim=1)
         target_cat = torch.eq(target1, target2).long()
        
         pair_fea = self.contrastive_module(feature_cat).contiguous().view(-1, self.contrastive_module_dim)
         pair_pred = self.contrastive_fc(pair_fea)
         loss = torch.sum(torch.bmm(gamma, torch.pow((feature_maps.unsqueeze(1).expand(-1, c.size()[1], -1, -1, -1) - c), 2).view(num, self.n_center, -1)))/(num) + F.cross_entropy(pair_pred, target_cat)
        else:
         loss = torch.sum(torch.bmm(gamma, torch.pow((feature_maps.unsqueeze(1).expand(-1, c.size()[1], -1, -1, -1) - c), 2).view(num, self.n_center, -1)))/(num)
        return loss

    def to_one_hot_vector(self, num_class, label):
        label = label.cpu().numpy()
        b = np.zeros((label.shape[0], num_class))
        b[np.arange(label.shape[0]), label] = 1
        b = torch.from_numpy(b)
        return b

    def compute_mv_loss(self, origin_feature, origin_center, target_center, target_features, gamma_head, target, gamma_tail):
        c = origin_center.detach()
        num, C, H, W = target_features.size()
        gamma_h = gamma_head.detach()
        gamma_t = gamma_tail.detach()
        ori_f = origin_feature.detach()
        c_ = target_center.detach()

        for p in self.contrastive_module.parameters():
            p.requires_grad = False
        for p in self.contrastive_fc.parameters():
            p.requires_grad = False

        index = gamma_h.argmax(dim=1)
        index_ = gamma_t.argmax(dim=1)
        index =  self.to_one_hot_vector(self.n_center, index).unsqueeze(1).cuda()
        index_ = self.to_one_hot_vector(self.n_center, index_).unsqueeze(1).cuda()

        c_o = torch.bmm(index, c.view(-1, self.n_center, self.H*self.W*self.C).double()).view(ori_f.size()).cuda()
        c_t = torch.bmm(index_, c_.view(-1, self.n_center, self.H*self.W*self.C).double()).view(ori_f.size()).cuda()

        var_map = (ori_f - c_o.float()).cuda()
        var_map_t = self.vec_transformation_module(var_map)

        target_features = target_features.cuda()

        target_features_vector = target_features - c_t.float()
        
        target_features_f = target_features + var_map_t
        target_features_norm = F.normalize(target_features_vector.view(-1, self.C), dim=1)
        var_map_norm = F.normalize(var_map_t.view(-1, self.C), dim=1)

        paired = torch.cat([ori_f, var_map_t], dim=1)

        pair_fea = self.contrastive_module(paired).contiguous().view(-1, self.contrastive_module_dim)
        pair_pred = self.contrastive_fc(pair_fea)

        loss = F.cross_entropy(pair_pred, torch.zeros(num).long().cuda()) + \
        (torch.sum(torch.abs(torch.norm(var_map_t.view(-1,self.C), dim=1) - torch.norm(var_map.view(-1, self.C), dim=1)))  + torch.sum(torch.abs(target_features_norm * var_map_norm - torch.ones(target_features_norm.size()).cuda())))/(num)

        return loss, target_features_f

    def forward(self, feature_maps, head_class_lists, target, epoch):
        maps_detach = feature_maps.detach()
        total = target.size()[0]
        num_head_list = len(head_class_lists)

        index_head = []
        index_tail = []
        
        head_class_lists_tensor = torch.Tensor(head_class_lists).cuda()
        head_class_lists_tensor = head_class_lists_tensor.unsqueeze(0).repeat(total, 1)
        target_expand = target.unsqueeze(1).repeat(1, num_head_list)
        
        index_head = torch.sum((target_expand == head_class_lists_tensor).long(), dim = 1).cuda()
        index_tail = 1 - index_head
        index_head_ = torch.eq(index_head, 1).cuda()
        index_tail_ = torch.eq(index_tail, 1).cuda()

        maps_detach_p = self.pooling(maps_detach).view(-1, self.C)
        target_select = target.unsqueeze(1)
        linear = self.linear[target_select,:,:].view(-1, self.C, self.n_center)
        bias = self.bias[target_select,:].view(-1, self.n_center)

        maps_detach_fc = torch.bmm(maps_detach_p.unsqueeze(1), linear).view(-1, self.n_center) + bias
        gamma = self.softmax(maps_detach_fc)

        centers_ = self.centers[target_select,:,:].view(-1, self.n_center, maps_detach.size()[1]).unsqueeze(3).unsqueeze(4).repeat(1, 1, 1, maps_detach.size()[2], maps_detach.size()[3])

        loss_cesc = self.compute_cesc_loss(maps_detach, centers_, gamma, target, epoch)
        loss_mv_total = torch.zeros(loss_cesc.size()).cuda()

        maps_tail = maps_detach[index_tail_,:,:,:]
        maps_head = maps_detach[index_head_,:,:,:]
        target_tail = target[index_tail_]
        target_head = target[index_head_]
        segment = 1

        num_tail = maps_tail.size()[0]
        num_head = maps_head.size()[0]
        
        if num_tail != 0 and num_head !=0 and epoch > self.epoch_thresh:
         if num_head >= num_tail:
          segment = int(num_head * self.strength / num_tail)
          if segment == 0:
             segment = 1

          for j in range(0, segment):
           latent_2 = maps_tail
           feature_origin =  maps_head[j * num_tail : (j + 1)*num_tail,:,:,:]

           maps_head_p = self.pooling(feature_origin).view(-1, self.C)
           target_head_select = target_head[j * num_tail : (j+1)* num_tail].unsqueeze(1)
           linear = self.linear[target_head_select, :, :].view(-1, self.C, self.n_center)
           bias = self.bias[target_head_select, :].view(-1, self.n_center)

           maps_head_fc = torch.bmm(maps_head_p.unsqueeze(1), linear).view(-1, self.n_center) + bias
           gamma_head = self.softmax(maps_head_fc)
           center_origin = self.centers[target_head_select,:,:].view(-1, self.n_center, maps_detach.size()[1]).unsqueeze(3).unsqueeze(4).repeat(1, 1, 1, maps_detach.size()[2], maps_detach.size()[3])

           maps_tail_p = self.pooling(latent_2).view(-1, self.C)
           target_tail_select = target_tail.unsqueeze(1)
           linear_ = self.linear[target_tail_select, :,:].view(-1, self.C, self.n_center)

           bias_ = self.bias[target_tail_select,:].view(-1, self.n_center)
           maps_tail_fc = torch.bmm(maps_tail_p.unsqueeze(1), linear_).view(-1, self.n_center) + bias_
           gamma_tail = self.softmax(maps_tail_fc)
           target_center = self.centers[target_tail_select,:,:].view(-1, self.n_center, maps_detach.size()[1]).unsqueeze(3).unsqueeze(4).repeat(1, 1, 1, maps_detach.size()[2], maps_detach.size()[3])
           loss_mv, feature_f = self.compute_mv_loss(feature_origin ,center_origin, target_center, latent_2, gamma_head, target_tail, gamma_tail)

           loss_mv_total += loss_mv

           feature_maps = torch.cat((feature_maps, feature_f) ,dim=0)
           target = torch.cat((target, target_tail), dim=0)
         else:
          segment = int(num_tail * self.strength / num_head)
          if segment == 0:
             segment = 1 
          for j in range(0, segment):
           latent_2 = maps_tail[j * num_head : (j + 1) * num_head,:,:,:]
           feature_origin =  maps_head

           maps_head_p = self.pooling(feature_origin).view(-1, self.C)
           target_head_select = target_head.unsqueeze(1)
           linear = self.linear[target_head_select, :, :].view(-1, self.C, self.n_center)
           bias = self.bias[target_head_select, :].view(-1, self.n_center)

           maps_head_fc = torch.bmm(maps_head_p.unsqueeze(1), linear).view(-1, self.n_center) + bias
           gamma_head = self.softmax(maps_head_fc)
           center_origin = self.centers[target_head_select,:,:].view(-1, self.n_center, maps_detach.size()[1]).unsqueeze(3).unsqueeze(4).repeat(1, 1, 1, maps_detach.size()[2], maps_detach.size()[3])

           maps_tail_p = self.pooling(latent_2).view(-1, self.C)
           target_tail_select = target_tail[j * num_head : (j + 1) * num_head].unsqueeze(1)
           linear_ = self.linear[target_tail_select, :,:].view(-1, self.C, self.n_center)
           bias_ = self.bias[target_tail_select,:].view(-1, self.n_center)

           maps_tail_fc = torch.bmm(maps_tail_p.unsqueeze(1), linear_).view(-1, self.n_center) + bias_
           gamma_tail = self.softmax(maps_tail_fc)
           target_center = self.centers[target_tail_select,:,:].view(-1, self.n_center, maps_detach.size()[1]).unsqueeze(3).unsqueeze(4).repeat(1, 1, 1, maps_detach.size()[2], maps_detach.size()[3])
           loss_mv, feature_f = self.compute_mv_loss(feature_origin ,center_origin, target_center, latent_2, gamma_head, target_tail, gamma_tail)
           feature_maps = torch.cat((feature_maps, feature_f) ,dim=0)

           loss_mv_total += loss_mv
           target = torch.cat((target, target_tail[j * num_head : (j + 1) * num_head]), dim=0)

        return feature_maps, loss_cesc, loss_mv_total/segment, target










import argparse
import os
import random
import time
import warnings
import sys
import numpy as np
import torch
import torch.nn as nn
import torch.nn.parallel
import torch.backends.cudnn as cudnn
import torch.optim
import torch.multiprocessing as mp
import torch.utils.data
import torchvision.transforms as transforms
import torchvision.datasets as datasets
import models
from tensorboardX import SummaryWriter
from sklearn.metrics import confusion_matrix
from utils import *
from imagenet_lt_data import *
from losses import LDAMLoss, FocalLoss
from collections import OrderedDict

#tensorboard --logdir=log/ImageNet_LT_resnext50_32x4d --port=6006
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')   # 设备

model_names = sorted(name for name in models.__dict__
    if name.islower() and not name.startswith("__")
    and callable(models.__dict__[name]))

parser = argparse.ArgumentParser(description='PyTorch Cifar Training')
parser.add_argument('-a', '--arch', metavar='ARCH', default='resnext50_32x4d',
                    choices=model_names,
                    help='model architecture: ' +
                        ' | '.join(model_names) +
                        ' (default: resnext50_32x4d)')
parser.add_argument('--rand_number', default=0, type=int, help='fix random number for data sampling')
parser.add_argument('-j', '--workers', default=4, type=int, metavar='N',
                    help='number of data loading workers (default: 4)')
parser.add_argument('--epochs', default=200, type=int, metavar='N',
                    help='number of total epochs to run')
parser.add_argument('--start-epoch', default=0, type=int, metavar='N',
                    help='manual epoch number (useful on restarts)')
parser.add_argument('-b', '--batch-size', default=96, type=int,
                    metavar='N',
                    help='mini-batch size')
parser.add_argument('--lr', '--learning-rate', default=0.1, type=float,
                    metavar='LR', help='initial learning rate', dest='lr')
parser.add_argument('--momentum', default=0.9, type=float, metavar='M',
                    help='momentum')
parser.add_argument('--wd', '--weight-decay', default=5e-4, type=float,
                    metavar='W', help='weight decay',
                    dest='weight_decay')
parser.add_argument('--epoch_thresh', default=160, type=int, metavar='N',
                    help='the epoch threshold for generating rare samples')
parser.add_argument('-p', '--print-freq', default=10, type=int,
                    metavar='N', help='print frequency (default: 10)')
parser.add_argument('--seed', default=None, type=int,
                    help='seed for initializing training. ')
parser.add_argument('--gpu', default='0', type=int,
                    help='GPU id to use.')
parser.add_argument('--root_log',type=str, default='log')
parser.add_argument('--root_model', type=str, default='checkpoint_rsg')
parser.add_argument('--image_dir', type=str, default='')
parser.add_argument('--head_tail_ratio', type=float, default=0.2)

best_acc1 = 0


def main():
    args = parser.parse_args()
    args.store_name = '_'.join(['ImageNet_LT', args.arch])
    prepare_folders(args)
    if args.seed is not None:
        random.seed(args.seed)
        torch.manual_seed(args.seed)
        cudnn.deterministic = True
        warnings.warn('You have chosen to seed training. '
                      'This will turn on the CUDNN deterministic setting, '
                      'which can slow down your training considerably! '
                      'You may see unexpected behavior when restarting '
                      'from checkpoints.')


    ngpus_per_node = torch.cuda.device_count()
    print(ngpus_per_node)
    main_worker(args.gpu, ngpus_per_node, args)


def main_worker(gpu, ngpus_per_node, args):
    global best_acc1

    print("=> creating model '{}'".format(args.arch))
    num_classes = 100
   
    # Data loading code

    transform_train = transforms.Compose([
      transforms.RandomResizedCrop(224),
      transforms.RandomHorizontalFlip(),
      transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0),
      transforms.ToTensor(),
      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)),
    ])


    transform_val = transforms.Compose([
      transforms.Resize((256,256)),
      transforms.CenterCrop(224),
      transforms.ToTensor(),
      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)),
    ])


    train_dataset = ImageNet_LT(args.image_dir, transform_train, 'train')
    val_dataset = ImageNet_LT(args.image_dir, transform_val, 'val')

    cls_num_list = train_dataset.get_cls_num_list()
    print('cls num list:')
    print(cls_num_list)

    args.cls_num_list = cls_num_list.copy()

    head_lists = []
    Inf = 0
    for i in range(int(num_classes * args.head_tail_ratio)):
      head_lists.append(cls_num_list.index(max(cls_num_list)))
      cls_num_list[cls_num_list.index(max(cls_num_list))]=Inf

    model = models.__dict__[args.arch](num_classes=num_classes, head_lists=head_lists, phase_train=True, epoch_thresh=args.epoch_thresh)
    # model = torch.nn.DataParallel(model).cuda()
    model = model.to(device)

    optimizer = torch.optim.SGD(model.parameters(), args.lr,
                                momentum=args.momentum,
                                weight_decay=args.weight_decay)

    cudnn.benchmark = True 
    train_sampler = None
        
    train_loader = torch.utils.data.DataLoader(
        train_dataset, batch_size=args.batch_size, shuffle=(train_sampler is None),
        num_workers=args.workers, pin_memory=True, sampler=train_sampler, drop_last=True)

    val_loader = torch.utils.data.DataLoader(
        val_dataset, batch_size=100, shuffle=False,
        num_workers=args.workers, pin_memory=True)

    # init log for training
    log_training = open(os.path.join(args.root_log, args.store_name, 'log_train.csv'), 'w')
    log_testing = open(os.path.join(args.root_log, args.store_name, 'log_test.csv'), 'w')
    with open(os.path.join(args.root_log, args.store_name, 'args.txt'), 'w') as f:
        f.write(str(args))
    tf_writer = SummaryWriter(log_dir=os.path.join(args.root_log, args.store_name))
    for epoch in range(args.start_epoch, args.epochs):
        adjust_learning_rate(optimizer, epoch, args)

        if epoch == 160:
          train_sampler = ImbalancedDatasetSampler(train_dataset, label_count=args.cls_num_list)
          train_loader = torch.utils.data.DataLoader(
          train_dataset, batch_size=args.batch_size, shuffle=(train_sampler is None),
          num_workers=args.workers, pin_memory=True, sampler=train_sampler, drop_last=True)
        

        effective_num = 1.0 - np.power(0, args.cls_num_list)
        per_cls_weights = (1.0) / np.array(effective_num)
        per_cls_weights = per_cls_weights / np.sum(per_cls_weights) * len(args.cls_num_list)
        per_cls_weights = torch.FloatTensor(per_cls_weights).cuda()

        criterion = LDAMLoss(cls_num_list=args.cls_num_list, max_m=0.3, s = 30, weight=per_cls_weights).cuda()

        # train for one epoch
        train(train_loader, model, criterion, optimizer, epoch, args, log_training, tf_writer)
        
        # evaluate on validation set
        acc1 = validate(val_loader, model, criterion, epoch, args, log_testing, tf_writer)

        # remember best acc@1 and save checkpoint
        is_best = acc1 > best_acc1
        best_acc1 = max(acc1, best_acc1)

        tf_writer.add_scalar('acc/test_top1_best', best_acc1, epoch)
        output_best = 'Best Prec@1: %.3f\n' % (best_acc1)
        print(output_best)
        log_testing.write(output_best + '\n')
        log_testing.flush()

        # remove RSG module, since RSG is not used during testing.
        new_state_dict = OrderedDict()
        for k in model.state_dict().keys():
            name =k
            if 'RSG' in k:
                continue
            new_state_dict[name] = model.state_dict()[k]

        save_checkpoint(args, {
            'epoch': epoch + 1,
            'arch': args.arch,
            'state_dict': new_state_dict,
            'best_acc1': best_acc1,
            'optimizer' : optimizer.state_dict(),
        }, is_best)


def train(train_loader, model, criterion, optimizer, epoch, args, log, tf_writer):
    batch_time = AverageMeter('Time', ':6.3f')
    data_time = AverageMeter('Data', ':6.3f')
    losses = AverageMeter('Loss', ':.4e')
    top1 = AverageMeter('Acc@1', ':6.2f')
    top5 = AverageMeter('Acc@5', ':6.2f')
    
    # switch to train mode
    model.train()

    end = time.time()
    for i, (input, target) in enumerate(iter(train_loader)):
        # measure data loading time
        data_time.update(time.time() - end)
        input=input.to(device)
        target = target.cuda(non_blocking=True)

        # compute output
        output, cesc_loss, total_mv_loss, combine_target= model(input, epoch, target)
        loss = criterion(output, combine_target) + 0.1 * cesc_loss.mean() + 0.01 * total_mv_loss.mean()

        acc1, acc5 = accuracy(output, combine_target, topk=(1, 5))
        losses.update(loss.item(), input.size(0))
        top1.update(acc1[0], input.size(0))
        top5.update(acc5[0], input.size(0))

        # compute gradient and do SGD step
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        # measure elapsed time
        batch_time.update(time.time() - end)
        end = time.time()

        if i % args.print_freq == 0:
            output = ('Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\t'
                      'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\t'
                      'Data {data_time.val:.3f} ({data_time.avg:.3f})\t'
                      'Loss {loss.val:.4f} ({loss.avg:.4f})\t'
                      'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\t'
                      'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'.format(
                epoch, i, len(train_loader), batch_time=batch_time,
                data_time=data_time, loss=losses, top1=top1, top5=top5, lr=optimizer.param_groups[-1]['lr'] * 0.1))  # TODO
            print(output)
            log.write(output + '\n')
            log.flush()

    tf_writer.add_scalar('loss/train', losses.avg, epoch)
    tf_writer.add_scalar('acc/train_top1', top1.avg, epoch)
    tf_writer.add_scalar('acc/train_top5', top5.avg, epoch)
    tf_writer.add_scalar('lr', optimizer.param_groups[-1]['lr'], epoch)

def validate(val_loader, model, criterion, epoch, args, log=None, tf_writer=None, flag='val'):
    batch_time = AverageMeter('Time', ':6.3f')
    losses = AverageMeter('Loss', ':.4e')
    top1 = AverageMeter('Acc@1', ':6.2f')
    top5 = AverageMeter('Acc@5', ':6.2f')
    
    # switch to evaluate mode
    model.eval()
    all_preds = []
    all_targets = []
    with torch.no_grad():
        end = time.time()
        for i, (input, target) in enumerate(val_loader):
            #if args.gpu is not None:
            input = input.cuda(0, non_blocking=True)
            target = target.cuda(0, non_blocking=True)

            # compute output
            output = model(input, phase_train=False)
            loss = criterion(output, target)

            # measure accuracy and record loss
            acc1, acc5 = accuracy(output, target, topk=(1, 5))
            losses.update(loss.item(), input.size(0))
            top1.update(acc1[0], input.size(0))
            top5.update(acc5[0], input.size(0))

            # measure elapsed time
            batch_time.update(time.time() - end)
            end = time.time()

            _, pred = torch.max(output, 1)
            all_preds.extend(pred.cpu().numpy())
            all_targets.extend(target.cpu().numpy())

            if i % args.print_freq == 0:
                output = ('Test: [{0}/{1}]\t'
                          'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\t'
                          'Loss {loss.val:.4f} ({loss.avg:.4f})\t'
                          'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\t'
                          'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'.format(
                    i, len(val_loader), batch_time=batch_time, loss=losses,
                    top1=top1, top5=top5))
                print(output)
        cf = confusion_matrix(all_targets, all_preds).astype(float)
        cls_cnt = cf.sum(axis=1)
        cls_hit = np.diag(cf)
        cls_acc = cls_hit / cls_cnt
        output = ('{flag} Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'
                .format(flag=flag, top1=top1, top5=top5, loss=losses))
        out_cls_acc = '%s Class Accuracy: %s'%(flag,(np.array2string(cls_acc, separator=',', formatter={'float_kind':lambda x: "%.3f" % x})))
        print(output)
        print(out_cls_acc)
        if log is not None:
            log.write(output + '\n')
            log.write(out_cls_acc + '\n')
            log.flush()

        tf_writer.add_scalar('loss/test_'+ flag, losses.avg, epoch)
        tf_writer.add_scalar('acc/test_' + flag + '_top1', top1.avg, epoch)
        tf_writer.add_scalar('acc/test_' + flag + '_top5', top5.avg, epoch)
        tf_writer.add_scalars('acc/test_' + flag + '_cls_acc', {str(i):x for i, x in enumerate(cls_acc)}, epoch)

    return top1.avg

def adjust_learning_rate(optimizer, epoch, args):
    """Sets the learning rate to the initial LR decayed by 10 every 30 epochs"""
    epoch = epoch + 1
    if  epoch > 180:
        lr = args.lr * 0.001
    elif epoch > 160:
        lr = args.lr * 0.01
    elif epoch > 120:
        lr = args.lr * 0.1
    else:
        if epoch <= 5:
          lr = args.lr * epoch / 5
        else:
          lr = args.lr

    for param_group in optimizer.param_groups:
        param_group['lr'] = lr

if __name__ == '__main__':
    main()







